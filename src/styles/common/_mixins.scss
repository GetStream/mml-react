///
/// MML component
///
/// Automatically scope the class name
///
/// __________________________________________________________________________--
@mixin mml-component($name, $variant: false) {
  @if $variant {
    .#{$mml-prefix}#{to-lower-case($name)}.#{$mml-prefix}-#{to-lower-case($variant)} {
      @content;
    }
  } @else {
    .#{$mml-prefix}#{to-lower-case($name)} {
      @content;
    }
  }
}

///
/// MML me
///
/// Automatically scope the class name to a message marked as "mine", which it
/// is by default shown on the right hand side
///
/// __________________________________________________________________________--
@mixin mml-me($theme: '') {
  #{$mml-selector-wrapper-message-self} & {
    @content;
  }
}

///
/// MML other
///
/// Automatically scope the class name to a message marked as "others", which it
/// is by default shown on the left hand side
///
/// __________________________________________________________________________--
@mixin mml-other($theme: '') {
  #{$mml-selector-wrapper-message-other} & {
    @content;
  }
}

///
/// MML theme
///
/// Outputs the common code tweaks that a theme needs to apply when used through
/// a className scope on the `<mml>` element
///
/// __________________________________________________________________________--
@mixin mml-theme($theme-slug: '', $theme-vars: ()) {
  .mml-container.#{$theme-slug} {

    @include mml-component('btn') {
      &--floating {
        box-shadow: mml-theme-var(shadow, $theme-vars);
      }
    }
    
  }
}

///
/// Card header borders encapsulation
///
/// __________________________________________________________________________--
@mixin mml-card-header-borders() {
  border: $mml-card-border;
  border-top-left-radius: $mml-card-header-border-radius;
  border-top-right-radius: $mml-card-header-border-radius;
}

///
/// Card body borders encapsulation
///
/// __________________________________________________________________________--
@mixin mml-card-body-borders() {
  border-width: 0 $mml-card-border-width;
  border-style: $mml-card-border-style;
  border-color: $mml-card-border-color;
}

///
/// Grid mixins
///
/// __________________________________________________________________________--
@mixin mml-row($gutter: $mml-grid-gutter) {
  display: flex;
  flex-wrap: wrap;
  @if $gutter {
    margin-right: -$gutter / 2;
    margin-left: -$gutter / 2;
  }
}

@mixin mml-col-ready($gutter: $mml-grid-gutter) {
  position: relative;
  width: 100%;
  @if $gutter {
    padding-right: $gutter / 2;
    padding-left: $gutter / 2;
  }
}

@mixin mml-col($size, $columns: $mml-grid-columns) {
  flex: 0 0 percentage($size / $columns);
  max-width: percentage($size / $columns);
}

@mixin mml-col-auto() {
  flex: 0 0 auto;
  width: auto;
  max-width: 100%;
}

@mixin mml-col-offset($size, $columns: $mml-grid-columns) {
  $num: $size / $columns;
  margin-left: if($num == 0, 0, percentage($num));
}

@mixin mml-grid-columns($columns: $mml-grid-columns, $gutter: $mml-grid-gutter, $breakpoints: $mml-grid-breakpoints) {
  %grid-column {
    position: relative;
    width: 100%;
    @if $gutter {
      padding-right: $gutter / 2;
      padding-left: $gutter / 2;
    }
  }

  @for $i from 1 through $columns {
    .#{$mml-prefix}col-#{$i} {
      @extend %grid-column;
      @include mml-col($i, $columns);
    }
  }

  .#{$mml-prefix}col-auto {
    @include mml-col-auto();
  }

  // `$columns - 1` because offsetting by the width of an entire row isn't possible
  @for $i from 0 through ($columns - 1) {
    @if not($i == 0) {
      // Avoid emitting useless .offset-0
      .#{$mml-prefix}offset-#{$i} {
        @include mml-col-offset($i, $columns);
      }
    }
  }
}
