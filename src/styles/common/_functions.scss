///
/// Theme value
///
/// This is a sort of dummy function, it is used just to make clear what is the
/// `key` about, for instance when we define variables and we just want to assign
/// a "dynamic" value from a theme we define it as `$myVar: card-bg;`. By convention
/// we wrap card-bg with this function to make clear we are referencing a value from
/// the `$mml-theme` map.
/// When a variable is defined in this way we later only use it through the mixin
/// `@include mml-themed('background': card-bg);`. Within there we apply the themed
/// value in the multiple ways we want.
@function mml-theme-val($key) {
  @return $key;
}

/// Get mml component prefixed selector
@function mml-component($name) {
  @return #{unquote('.' + $mml-prefix)}#{to-lower-case($name)};
}

/// Camelize string
/// @see https://gist.github.com/pascalduez/10011785
@function mml-camelcase($string) {
  $progress: $string;
  $result: '';
  $exclude: ' ', '-', '–', '—', '_', ',', ';', ':', '.';

  @while str-length($progress) > 0 {
    $char: str-slice($progress, 1, 1);

    @if mml-contain($exclude, $char) {
      $progress: mml-capitalize(str-slice($progress, 2, 2)) + str-slice($progress, 3);
    } @else {
      $result: $result + $char;
      $progress: str-slice($progress, 2);
    }
  }

  @return $result;
}

@function mml-capitalize($string) {
  @return to-upper-case(str-slice($string, 1, 1)) + str-slice($string, 2);
}

@function mml-contain($list, $value) {
  @return not not index($list, $value);
}

@function mml-str-replace($string, $search, $replace) {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      mml-str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

@function mml-interpolated-var($string, $replace) {
  @return mml-str-replace($string, '__var__', $replace);
}
