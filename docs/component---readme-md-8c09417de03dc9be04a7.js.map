{"version":3,"sources":["webpack:///../README.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","alt","src","isMDXComponent"],"mappings":"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","file":"component---readme-md-8c09417de03dc9be04a7.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/media/data/web/web-projects/GetStream/mml-react/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"mml-react\"\n    }}>{`MML React`}</h1>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/mml-react\"\n      }}><img alt=\"NPM\" src=\"https://img.shields.io/npm/v/mml-react.svg\" /></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/GetStream/mml-react/actions\"\n      }}><img alt=\"CI\" src=\"https://github.com/GetStream/mml-react/workflows/CI/badge.svg\" /></a>{`\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://getstream.github.io/mml-react/\"\n      }}><img alt=\"Component Reference\" src=\"https://img.shields.io/badge/docs-component%20reference-blue.svg\" /></a></p>\n    <h2 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`// YARN\nyarn add mml-react\n\n//NPM\nnpm install mml-react --save\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { MML } from 'mml-react';\n\n<MML source=\"<mml>Text</mml>\" />;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"overwriting-components\"\n    }}>{`Overwriting Components`}</h2>\n    <p>{`Making basic changes to the components is quite easy. You can use this option to add support for more custom tags.`}</p>\n    <p>{`Here's an example of how to overwrite the button tag's React component:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const converters = {\n  button: (tag, children) => {\n    return <MyCustomButton {...tag.node.attributes} text={tag.getText()} key={tag.key} />;\n  },\n};\n\n<MML converters={converters} source={source} />;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"components\"\n    }}>{`Components`}</h2>\n    <p>{`MML React components could be divided in four categories:`}</p>\n    <h3 {...{\n      \"id\": \"naked-components\"\n    }}>{`Naked Components`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Very basic pieces of UI typically beyond a matter of styling`}</p>\n    </blockquote>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/components/row\"\n        }}><inlineCode parentName=\"a\">{`Row`}</inlineCode></a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/components/col\"\n        }}><inlineCode parentName=\"a\">{`Col`}</inlineCode></a></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"container-components\"\n    }}>{`Container Components`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Always host other components, can be themable`}</p>\n    </blockquote>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/components/card\"\n        }}><inlineCode parentName=\"a\">{`Card`}</inlineCode></a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/components/card-header\"\n        }}><inlineCode parentName=\"a\">{`CardHeader`}</inlineCode></a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/components/card-body\"\n        }}><inlineCode parentName=\"a\">{`CardBody`}</inlineCode></a></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"core-components\"\n    }}>{`Core Components`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Basic components that can be composed and themed`}</p>\n    </blockquote>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/components/text\"\n        }}><inlineCode parentName=\"a\">{`Text`}</inlineCode></a>{`: a block of text`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/components/button\"\n        }}><inlineCode parentName=\"a\">{`Button`}</inlineCode></a>{`: a simple button`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/components/image\"\n        }}><inlineCode parentName=\"a\">{`Image`}</inlineCode></a>{`: a simple responsive image`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/components/input\"\n        }}><inlineCode parentName=\"a\">{`Input`}</inlineCode></a>{`: an input field`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/components/md\"\n        }}><inlineCode parentName=\"a\">{`MD`}</inlineCode></a>{`: renders markdown`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/components/icon\"\n        }}><inlineCode parentName=\"a\">{`Icon`}</inlineCode></a>{`: simply displays an icon from material design icons`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/components/loader\"\n        }}><inlineCode parentName=\"a\">{`Loader`}</inlineCode></a>{`: signals a `}<em parentName=\"li\">{`loading`}</em>{` temporary state with a circular spinner`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/components/error\"\n        }}><inlineCode parentName=\"a\">{`Error`}</inlineCode></a>{`: display an `}<em parentName=\"li\">{`error`}</em>{` message`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/components/success\"\n        }}><inlineCode parentName=\"a\">{`Success`}</inlineCode></a>{`: display a `}<em parentName=\"li\">{`success`}</em>{` message`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"structured-components\"\n    }}>{`Structured Components`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\">{`More complex components composed of other components, certainly themable`}</p>\n    </blockquote>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/components/add-to-calendar\"\n        }}><inlineCode parentName=\"a\">{`AddToCalendar`}</inlineCode></a>{`: wrapped in a `}<a parentName=\"li\" {...{\n          \"href\": \"/components/card\"\n        }}><inlineCode parentName=\"a\">{`Card`}</inlineCode></a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/components/scheduler\"\n        }}><inlineCode parentName=\"a\">{`Scheduler`}</inlineCode></a>{`: wrapped in a `}<a parentName=\"li\" {...{\n          \"href\": \"/components/card\"\n        }}><inlineCode parentName=\"a\">{`Card`}</inlineCode></a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/components/button-list\"\n        }}><inlineCode parentName=\"a\">{`ButtonList`}</inlineCode></a>{`: a list of `}<a parentName=\"li\" {...{\n          \"href\": \"/components/button\"\n        }}><inlineCode parentName=\"a\">{`Button`}</inlineCode></a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/components/carousel\"\n        }}><inlineCode parentName=\"a\">{`Carousel`}</inlineCode></a>{`: a series of `}<a parentName=\"li\" {...{\n          \"href\": \"/components/carousel-item\"\n        }}><inlineCode parentName=\"a\">{`CarouselItem`}</inlineCode></a>{` typically containing `}<a parentName=\"li\" {...{\n          \"href\": \"/components/image\"\n        }}><inlineCode parentName=\"a\">{`Image`}</inlineCode></a>{`, `}<a parentName=\"li\" {...{\n          \"href\": \"/components/text\"\n        }}><inlineCode parentName=\"a\">{`Text`}</inlineCode></a>{` and `}<a parentName=\"li\" {...{\n          \"href\": \"/components/button\"\n        }}><inlineCode parentName=\"a\">{`Button`}</inlineCode></a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/components/number\"\n        }}><inlineCode parentName=\"a\">{`Number`}</inlineCode></a>{`: input spinner composed of two `}<a parentName=\"li\" {...{\n          \"href\": \"/components/button\"\n        }}><inlineCode parentName=\"a\">{`Button`}</inlineCode></a>{` and a counter`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"styles-customization\"\n    }}>{`Styles customization`}</h2>\n    <p>{`MML react ships with some good looking default styles but it can be completely customised to suit your visual identity.`}</p>\n    <h3 {...{\n      \"id\": \"themes\"\n    }}>{`Themes`}</h3>\n    <p>{`MML ships with a default theme plus four variations. These differentiate from one another only in terms of colours providing different look and feels that suits common scenarios like Social messaging, Customer support, etc. Each theme is either available in the compiled and autoprefixed `}<inlineCode parentName=\"p\">{`dist/styles/{name}.css`}</inlineCode>{` file and in the `}<inlineCode parentName=\"p\">{`src/styles/{name}.scss`}</inlineCode>{` source file. You should always include only one of this files, either `}<inlineCode parentName=\"p\">{`css`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`scss`}</inlineCode>{`, as they all includes the basic styling your MML components need.`}</p>\n    <p>{`If your projects include a `}<inlineCode parentName=\"p\">{`sass`}</inlineCode>{` compilation step you might tweak the theme variables and roll out your branded style. A theme is made of the following SCSS map:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`$mml-theme: (\n  primary-accent: #006cff,\n  app-canvas: #fff,\n  text-high-emphasis: #0e1621,\n  text-mid-emphasis: #8a898e,\n  text-low-emphasis: #b2b1b5,\n  text-self: #fff,\n  text-pressed: #fff,\n  card-bg: #f2f2f2,\n  card-alt-bg: #fff,\n  card-self-bg: #41affc,\n  stroke: #e5e5e6,\n  stroke-low-emphasis: #f2f2f2,\n  shadow: 0px 2px 5px rgba(0, 0, 0, 0.15),\n);\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If you are running `}<inlineCode parentName=\"p\">{`sass`}</inlineCode>{` within your project you might customize most aspects of mml styling other than the them through scss variables. Refer `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/GetStream/mml-react/blob/master/src/styles/common/_variables.scss\"\n        }}>{`to the source`}</a>{` to see what is available.`}</p>\n    </blockquote>\n    <p>{`Each of these variables is also avaialable as CSS variable that you can tweak dynamically, prefixed with `}<inlineCode parentName=\"p\">{`--mml`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`:root {\n  --mml-primary-accent: #006cff;\n  --mml-app-canvas: #fff;\n}\n`}</code></pre>\n    <p>{`This theme related data is also made avaiable to javascript through `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/css-modules/icss#export\"\n      }}><inlineCode parentName=\"a\">{`icss :export`}</inlineCode></a>{` so that you can import them and reuse them to coherently style other parts of your chat outside of MML attachments (these are used in the MML docz app for instance).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { locals as mmlTheme } from 'mml-react/dist/styles/index.css';\n// or\nimport { locals as mmlTheme } from 'mml-react/src/styles/index.scss';\n\n// variables for js are transformed into camelCase, e.g.:\nprimaryAccent: '#006cff',\nappCanvas: '#fff',\n// ...etc.\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"differentiations-between-mine-and-others-messages\"\n    }}>{`Differentiations between mine and other's messages`}</h3>\n    <p>{`Some components need to slightly change according to their position in the chat. To achieve this MML scope its `}<inlineCode parentName=\"p\">{`CSS`}</inlineCode>{` alterations in a configurable selector through the `}<inlineCode parentName=\"p\">{`SCSS`}</inlineCode>{` variables `}<inlineCode parentName=\"p\">{`$mml-selector-wrapper-message-self`}</inlineCode>{` and  `}<inlineCode parentName=\"p\">{`$mml-selector-wrapper-message-other`}</inlineCode>{` whose default values are respectively `}<inlineCode parentName=\"p\">{`.me`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`.other`}</inlineCode>{` class selectors. These selectors need to be placed on the container element that wraps your MML attachment. MML styling by default aligns `}<inlineCode parentName=\"p\">{`.other`}</inlineCode>{` messages on the left hand side and `}<inlineCode parentName=\"p\">{`.me`}</inlineCode>{` messages on the right hand side.\nInternally to this library these SCSS tweaks are implemented through the `}<inlineCode parentName=\"p\">{`SCSS mixins mml-me and mml-other`}</inlineCode>{`, e.g.:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`@include mml-component('text') {\n  @include mml-other() {\n    text-align: left;\n  }\n\n  @include mml-me() {\n    text-align: right;\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"html-structure\"\n    }}>{`HTML structure`}</h3>\n    <p>{`MML attachments always have two wrapping elements with the following two classes:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`.mml-container\n  .mml-wrap\n`}</code></pre>\n    <p>{`The class `}<inlineCode parentName=\"p\">{`.mml-container`}</inlineCode>{` is responsible for some very basic styling that other components inherit, like `}<inlineCode parentName=\"p\">{`border-box`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`font-family`}</inlineCode>{`.\nThe class `}<inlineCode parentName=\"p\">{`.mml-wrap`}</inlineCode>{` instead takes care of contextual styling, like `}<inlineCode parentName=\"p\">{`border-radius`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`margin`}</inlineCode>{`s, that are most likely dependent on the differentiation between `}<em parentName=\"p\">{`me`}</em>{` and `}<em parentName=\"p\">{`other`}</em>{` messages `}<a parentName=\"p\" {...{\n        \"href\": \"#differentiations-between-mine-and-others-messages\"\n      }}>{`seen above`}</a>{`.`}</p>\n    <p>{`Inside `}<inlineCode parentName=\"p\">{`mml-wrap`}</inlineCode>{` you could have as immediate children either the components as they are or the components automatically wrapped in a `}<inlineCode parentName=\"p\">{`<div class=\"mml-card\">...</div>`}</inlineCode>{` when `}<inlineCode parentName=\"p\">{`<mml type=\"card\">`}</inlineCode>{` is used (see the `}<a parentName=\"p\" {...{\n        \"href\": \"/mml#with-card-type\"\n      }}><inlineCode parentName=\"a\">{`MML`}</inlineCode>{` docs`}</a>{`). Note that the `}<inlineCode parentName=\"p\">{`mml-card`}</inlineCode>{` class (and its `}<inlineCode parentName=\"p\">{`Card`}</inlineCode>{` React component) is also used internally in various components like `}<a parentName=\"p\" {...{\n        \"href\": \"/components/scheduler\"\n      }}><inlineCode parentName=\"a\">{`Scheduler`}</inlineCode></a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"/components/add-to-calendar\"\n      }}><inlineCode parentName=\"a\">{`AddToCalendar`}</inlineCode></a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"development--contributions\"\n    }}>{`Development & Contributions`}</h2>\n    <h2 {...{\n      \"id\": \"commands\"\n    }}>{`commands`}</h2>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn docs`}</inlineCode>{` to run hot reload docs, best way to work on the components`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn build`}</inlineCode>{` to build and type check`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn lint`}</inlineCode>{` to run linting`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn format`}</inlineCode>{` to prettify things`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn test`}</inlineCode>{` to run tests`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"understanding-the-parser\"\n    }}>{`Understanding the Parser`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`SourceToXML parse MML string into XML node structure`}</li>\n      <li parentName=\"ol\">{`XMLtoMMLTree converts the XML nodes to a tree of MML nodes (MMLTree)`}</li>\n      <li parentName=\"ol\">{`MMLTree can be converted to React nodes using ToReact method`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"tree\"\n    }}>{`Tree`}</h2>\n    <p>{`The tree has:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The name of the MML tag (passed to callback data as `}<inlineCode parentName=\"li\">{`mml_name`}</inlineCode>{`)`}</li>\n      <li parentName=\"ul\">{`MMLTag Children`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"naming\"\n    }}>{`Naming`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Tree: The tree of MML tags`}</li>\n      <li parentName=\"ul\">{`Converters: Mapping from MMLTag to React Component`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"how-to-create-a-new-tag\"\n    }}>{`How to create a new tag`}</h2>\n    <p>{`Let's say you want to create a new tag called `}<inlineCode parentName=\"p\">{`color_picker`}</inlineCode>{`.\nHere's how you would go about implementing it.`}</p>\n    <h3 {...{\n      \"id\": \"step-1---react-node\"\n    }}>{`Step 1 - React node`}</h3>\n    <p>{`In `}<inlineCode parentName=\"p\">{`src/components`}</inlineCode>{` directory create a file called `}<inlineCode parentName=\"p\">{`ColorPicker.tsx`}</inlineCode>{` and do something along these lines:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`export const ColorPicker: FC<ColorPickerProps> = ({ name, value = '' }) => {\n  const [state, setState] = useState(value);\n  return (\n    <input\n      className=\"mml-input\"\n      name={name}\n      value={state}\n      placeholder={placeholder}\n      onChange={(event) => setState(event.target.value)}\n    />\n  );\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"step-2---converters\"\n    }}>{`Step 2 - Converters`}</h3>\n    <p>{`Add an entry to `}<inlineCode parentName=\"p\">{`converters.tsx`}</inlineCode>{` file`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`color_picker: (tag: MMLTag) => {\n  return <ColorPicker {...tag.attributes} key={tag.key} name={tag.attributes.name} value={tag.attributes.value} />;\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"step-3---doc\"\n    }}>{`Step 3 - Doc`}</h3>\n    <p>{`Docs is the easiest way to test your component in isolation. Simply create a new file named `}<inlineCode parentName=\"p\">{`ColorPicker.mdx`}</inlineCode>{` similar to other mdx files in the component directory and document/test the component.`}</p>\n    <h2 {...{\n      \"id\": \"contributing\"\n    }}>{`Contributing`}</h2>\n    <p>{`We welcome code changes that improve this library or fix a problem. Please make sure to follow all best practices and add tests if applicable before submitting a Pull Request on Github. We are pleased to merge your code into the official repository. Make sure to sign our `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.google.com/forms/d/e/1FAIpQLScFKsKkAJI7mhCr7K9rEIOpqIDThrWxuvxnwUq2XkHyG154vQ/viewform\"\n      }}>{`Contributor License Agreement (CLA)`}</a>{` first. See our license file for more details.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}