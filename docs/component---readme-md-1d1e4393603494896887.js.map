{"version":3,"sources":["webpack:///../README.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---readme-md-1d1e4393603494896887.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/amin/Stream/mml-react-original/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"mml-for-react\"\n    }}>{`MML for React`}</h1>\n    <h2 {...{\n      \"id\": \"todo\"\n    }}>{`TODO`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`fix stream-chat-react build issues (done)`}</li>\n      <li parentName=\"ul\">{`functional components with hooks (done)`}</li>\n      <li parentName=\"ul\">{`use a context to share stuff to lower level components (done)`}</li>\n      <li parentName=\"ul\">{`toReact should be defined at the tree level and allow you to overwrite the mappings (done)`}</li>\n      <li parentName=\"ul\">{`make mml in stream chat react a singleton type of pattern (done)`}</li>\n      <li parentName=\"ul\">{`refactor how state is handled for date picker element and number element (done)`}</li>\n      <li parentName=\"ul\">{`move the converterConfig for react into it's own file (done)`}</li>\n      <li parentName=\"ul\">{`prop types for all react tags (done)`}</li>\n      <li parentName=\"ul\">{`cleanup all linting errors (done)`}</li>\n      <li parentName=\"ul\">{`styleguidist for all react tags (done)`}</li>\n      <li parentName=\"ul\">{`move all tags into shared files (done)`}</li>\n      <li parentName=\"ul\">{`Document how to create a new tag (done)`}</li>\n      <li parentName=\"ul\">{`styleguidist publish flow (done)`}</li>\n      <li parentName=\"ul\">{`convert date string into date object for add to calendar (done)`}</li>\n      <li parentName=\"ul\">{`Refine examples for docs and example project (done)`}</li>\n      <li parentName=\"ul\">{`Write Docs in stream CMS (done)`}</li>\n      <li parentName=\"ul\">{`Add alt and title support to image tags (done)`}</li>\n      <li parentName=\"ul\">{`Review the button tag (done)`}</li>\n      <li parentName=\"ul\">{`Fix MML & MML Container state management (done)`}</li>\n      <li parentName=\"ul\">{`ship a 0.1 release on NPM (done)`}</li>\n      <li parentName=\"ul\">{`ship stream-chat-react support for MML (mml2 branch, ready)`}</li>\n      <li parentName=\"ul\">{`figure out proptype weirdness (getting some validation errors on valid input)`}</li>\n      <li parentName=\"ul\">{`document how to overwrite 1 specific component for MML (done)`}</li>\n      <li parentName=\"ul\">{`Button/URL verify it works (done)`}</li>\n    </ul>\n    <ul>\n      <li parentName=\"ul\">{`scheduler component`}</li>\n      <li parentName=\"ul\">{`implement hard failure on invalid MML`}</li>\n    </ul>\n    <ul>\n      <li parentName=\"ul\">{`clean Git history`}</li>\n      <li parentName=\"ul\">{`tests & coverage reporting`}</li>\n      <li parentName=\"ul\">{`CSS for all components`}</li>\n      <li parentName=\"ul\">{`consider renaming column tag, consider if we need a table tag..?`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"design\"\n    }}>{`Design:`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Add to Calendar element is missing`}</li>\n      <li parentName=\"ul\">{`Loading, Success and Error states`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"install\"\n    }}>{`Install`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`git clone https://github.com/GetStream/mml-react.git\ncd mml-react\nyarn; yarn start\n`}</code></pre>\n    <p>{`and in a new terminal do:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`cd example\nyarn; yarn start\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { MML } from 'mml-react';\n\n// use the react component\n<MML source={mml} />;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"overwriting-components\"\n    }}>{`Overwriting Components`}</h2>\n    <p>{`Making basic changes to the components is quite easy.\nHere's an example of how to overwrite the button tag's React component:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`import {converters} from 'mml-react'\nconst config = {...converters}\nconfig['button'] = (tag, children) => {\n  return <MyCustomButton text={tag.getText()} {...tag.node.attributes} key={tag.key} />\n}\n<MML converters={config} source={source} />\n`}</code></pre>\n    <p>{`This approach is generally only recommended for small changes.\nIn most cases where you need more features than MML offers we recommend writing a custom attachment type.`}</p>\n    <h1 {...{\n      \"id\": \"development--contributions\"\n    }}>{`Development & Contributions`}</h1>\n    <p>{`We are intentionally keeping the scope of MML limited.\nIt should solve 80% of your needs for interactive messages.\nWe can't support every scenario though, if you need something more complex you can always implement your own attachment type.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn lint`}</inlineCode>{` to run linting`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn prettier`}</inlineCode>{` to prettify things`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`yarn test`}</inlineCode>{` to run tests`}</li>\n    </ul>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://getstream.github.io/mml-react/\"\n      }}>{`StyleGuidist docs`}</a>{` are available`}</p>\n    <h2 {...{\n      \"id\": \"understanding-the-parser\"\n    }}>{`Understanding the Parser`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`SourceToXML turns an MML string into a XML node structure`}</li>\n      <li parentName=\"ol\">{`XMLtoMMLTree converts the XML nodes to a tree of MML nodes (MMLTree)`}</li>\n      <li parentName=\"ol\">{`MML nodes can be converted to React nodes using their ToReact method`}</li>\n      <li parentName=\"ol\">{`The MML react component handles these steps automatically`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"tree\"\n    }}>{`Tree`}</h2>\n    <p>{`The tree knows:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The name of the MML tag (needed for form logic)`}</li>\n      <li parentName=\"ul\">{`If there are data tags`}</li>\n      <li parentName=\"ul\">{`The initial state for the data tags`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"naming\"\n    }}>{`Naming:`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Tree: The tree of MML tags`}</li>\n      <li parentName=\"ul\">{`Tag: Intermediate class used for validating MML tags`}</li>\n      <li parentName=\"ul\">{`Converters: Mapping from MML tag to React Component (React Native coming later)`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"how-to-create-a-new-tag\"\n    }}>{`How to create a new tag`}</h2>\n    <p>{`As an example let's say you want to create a new tag called `}<inlineCode parentName=\"p\">{`color_picker`}</inlineCode>{`.\nHere's how you would go about implementing it.`}</p>\n    <h3 {...{\n      \"id\": \"step-1---tag\"\n    }}>{`Step 1 - Tag`}</h3>\n    <p>{`Add something like this to src/tags/data.js`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`export class ColorPicker extends MMLDataTag {\n  initialState() {\n    const data = {};\n    data[this.node.attributes.name] = this.node.attributes.value;\n    return data;\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"step-2---tag-parser\"\n    }}>{`Step 2 - Tag parser`}</h3>\n    <p>{`Open `}<inlineCode parentName=\"p\">{`src/tags/index.js`}</inlineCode>{` and add this to tags variable:`}</p>\n    <p>{`tags = {\n...\ncolor_picker: ColorPicker,\n...\n}`}</p>\n    <h3 {...{\n      \"id\": \"step-3---react-node\"\n    }}>{`Step 3 - React node`}</h3>\n    <p>{`In `}<inlineCode parentName=\"p\">{`src/components`}</inlineCode>{` create a file called ColorPicker.js and do something along these lines:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`export function ColorPicker({ name, ...props }) {\n  const mmlContext = useContext(MMLContext);\n\n  const value = mmlContext[name];\n\n  return <input value={value} onChange={(event) => mmlContext.setValue(name, event.target.value)} />;\n}\n`}</code></pre>\n    <p>{`Styleguidist is the easiest way to test your react component in isolation.\nThe MMLContainer provides the right context so you can test it like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<MMLContainer>\n  <ColorPicker />\n</MMLContainer>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"step-4---converter\"\n    }}>{`Step 4 - Converter`}</h3>\n    <p>{`Open `}<inlineCode parentName=\"p\">{`src/converters.js`}</inlineCode>{` and add something like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`color_picker: tag => {\n  return <ColorPicker {...tag.node.attributes} />\n},\n`}</code></pre>\n    <p>{`And that's it`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}