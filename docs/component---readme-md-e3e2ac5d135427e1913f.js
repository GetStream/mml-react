(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{"7OsV":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return s}));var a=n("k0FJ"),o=n("oedh"),r=(n("mXGw"),n("/FXl")),l=n("TjRS"),c=(n("aD51"),{});void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"README.md"}});var i={_frontmatter:c},b=l.a;function s(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)(b,Object(a.a)({},i,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"mml-for-react"},"MML for React"),Object(r.b)("h2",{id:"todo"},"TODO"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"fix stream-chat-react build issues (done)"),Object(r.b)("li",{parentName:"ul"},"functional components with hooks (done)"),Object(r.b)("li",{parentName:"ul"},"use a context to share stuff to lower level components (done)"),Object(r.b)("li",{parentName:"ul"},"toReact should be defined at the tree level and allow you to overwrite the mappings (done)"),Object(r.b)("li",{parentName:"ul"},"make mml in stream chat react a singleton type of pattern (done)"),Object(r.b)("li",{parentName:"ul"},"refactor how state is handled for date picker element and number element (done)"),Object(r.b)("li",{parentName:"ul"},"move the converterConfig for react into it's own file (done)"),Object(r.b)("li",{parentName:"ul"},"prop types for all react tags (done)"),Object(r.b)("li",{parentName:"ul"},"cleanup all linting errors (done)"),Object(r.b)("li",{parentName:"ul"},"styleguidist for all react tags (done)"),Object(r.b)("li",{parentName:"ul"},"move all tags into shared files (done)"),Object(r.b)("li",{parentName:"ul"},"Document how to create a new tag (done)"),Object(r.b)("li",{parentName:"ul"},"styleguidist publish flow (done)"),Object(r.b)("li",{parentName:"ul"},"convert date string into date object for add to calendar (done)"),Object(r.b)("li",{parentName:"ul"},"Refine examples for docs and example project (done)"),Object(r.b)("li",{parentName:"ul"},"Write Docs in stream CMS (done)"),Object(r.b)("li",{parentName:"ul"},"Add alt and title support to image tags (done)"),Object(r.b)("li",{parentName:"ul"},"Review the button tag (done)"),Object(r.b)("li",{parentName:"ul"},"Fix MML & MML Container state management (done)"),Object(r.b)("li",{parentName:"ul"},"ship a 0.1 release on NPM (done)"),Object(r.b)("li",{parentName:"ul"},"ship stream-chat-react support for MML (mml2 branch, ready)"),Object(r.b)("li",{parentName:"ul"},"figure out proptype weirdness (getting some validation errors on valid input)"),Object(r.b)("li",{parentName:"ul"},"document how to overwrite 1 specific component for MML (done)"),Object(r.b)("li",{parentName:"ul"},"Button/URL verify it works (done)")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"scheduler component"),Object(r.b)("li",{parentName:"ul"},"implement hard failure on invalid MML")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"clean Git history"),Object(r.b)("li",{parentName:"ul"},"tests & coverage reporting"),Object(r.b)("li",{parentName:"ul"},"CSS for all components"),Object(r.b)("li",{parentName:"ul"},"consider renaming column tag, consider if we need a table tag..?")),Object(r.b)("h2",{id:"design"},"Design:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Add to Calendar element is missing"),Object(r.b)("li",{parentName:"ul"},"Loading, Success and Error states")),Object(r.b)("h2",{id:"install"},"Install"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"git clone https://github.com/GetStream/mml-react.git\ncd mml-react\nyarn; yarn start\n")),Object(r.b)("p",null,"and in a new terminal do:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"cd example\nyarn; yarn start\n")),Object(r.b)("h2",{id:"usage"},"Usage"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import { MML } from 'mml-react';\n\n// use the react component\n<MML source={mml} />;\n")),Object(r.b)("h2",{id:"overwriting-components"},"Overwriting Components"),Object(r.b)("p",null,"Making basic changes to the components is quite easy.\nHere's an example of how to overwrite the button tag's React component:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"import {converters} from 'mml-react'\nconst config = {...converters}\nconfig['button'] = (tag, children) => {\n  return <MyCustomButton text={tag.getText()} {...tag.node.attributes} key={tag.key} />\n}\n<MML converters={config} source={source} />\n")),Object(r.b)("p",null,"This approach is generally only recommended for small changes.\nIn most cases where you need more features than MML offers we recommend writing a custom attachment type."),Object(r.b)("h1",{id:"development--contributions"},"Development & Contributions"),Object(r.b)("p",null,"We are intentionally keeping the scope of MML limited.\nIt should solve 80% of your needs for interactive messages.\nWe can't support every scenario though, if you need something more complex you can always implement your own attachment type."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"yarn lint")," to run linting"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"yarn prettier")," to prettify things"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"yarn test")," to run tests")),Object(r.b)("p",null,Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://getstream.github.io/mml-react/"}),"StyleGuidist docs")," are available"),Object(r.b)("h2",{id:"understanding-the-parser"},"Understanding the Parser"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"SourceToXML turns an MML string into a XML node structure"),Object(r.b)("li",{parentName:"ol"},"XMLtoMMLTree converts the XML nodes to a tree of MML nodes (MMLTree)"),Object(r.b)("li",{parentName:"ol"},"MML nodes can be converted to React nodes using their ToReact method"),Object(r.b)("li",{parentName:"ol"},"The MML react component handles these steps automatically")),Object(r.b)("h2",{id:"tree"},"Tree"),Object(r.b)("p",null,"The tree knows:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"The name of the MML tag (needed for form logic)"),Object(r.b)("li",{parentName:"ul"},"If there are data tags"),Object(r.b)("li",{parentName:"ul"},"The initial state for the data tags")),Object(r.b)("h2",{id:"naming"},"Naming:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Tree: The tree of MML tags"),Object(r.b)("li",{parentName:"ul"},"Tag: Intermediate class used for validating MML tags"),Object(r.b)("li",{parentName:"ul"},"Converters: Mapping from MML tag to React Component (React Native coming later)")),Object(r.b)("h2",{id:"how-to-create-a-new-tag"},"How to create a new tag"),Object(r.b)("p",null,"As an example let's say you want to create a new tag called ",Object(r.b)("inlineCode",{parentName:"p"},"color_picker"),".\nHere's how you would go about implementing it."),Object(r.b)("h3",{id:"step-1---tag"},"Step 1 - Tag"),Object(r.b)("p",null,"Add something like this to src/tags/data.js"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"export class ColorPicker extends MMLDataTag {\n  initialState() {\n    const data = {};\n    data[this.node.attributes.name] = this.node.attributes.value;\n    return data;\n  }\n}\n")),Object(r.b)("h3",{id:"step-2---tag-parser"},"Step 2 - Tag parser"),Object(r.b)("p",null,"Open ",Object(r.b)("inlineCode",{parentName:"p"},"src/tags/index.js")," and add this to tags variable:"),Object(r.b)("p",null,"tags = {\n...\ncolor_picker: ColorPicker,\n...\n}"),Object(r.b)("h3",{id:"step-3---react-node"},"Step 3 - React node"),Object(r.b)("p",null,"In ",Object(r.b)("inlineCode",{parentName:"p"},"src/components")," create a file called ColorPicker.js and do something along these lines:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"export function ColorPicker({ name, ...props }) {\n  const mmlContext = useContext(MMLContext);\n\n  const value = mmlContext[name];\n\n  return <input value={value} onChange={(event) => mmlContext.setValue(name, event.target.value)} />;\n}\n")),Object(r.b)("p",null,"Styleguidist is the easiest way to test your react component in isolation.\nThe MMLContainer provides the right context so you can test it like:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"<MMLContainer>\n  <ColorPicker />\n</MMLContainer>\n")),Object(r.b)("h3",{id:"step-4---converter"},"Step 4 - Converter"),Object(r.b)("p",null,"Open ",Object(r.b)("inlineCode",{parentName:"p"},"src/converters.js")," and add something like this:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"color_picker: tag => {\n  return <ColorPicker {...tag.node.attributes} />\n},\n")),Object(r.b)("p",null,"And that's it"))}void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"README.md"}}),s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---readme-md-e3e2ac5d135427e1913f.js.map